@inherits LayoutComponentBase
@implements IDisposable

<div class="page">

    <div class="sidebar">
        <NavMenu />
    </div>
    <main>
        <div class="bar-user-info">
            <div class="user-info">

                <span><strong>@game.Player.Name</strong></span> |

                <span>
                    <img src="images/upbar/moneta.png" alt="Money" class="upbar-icon" />
                    <strong>@game.Player.Money</strong>
                </span> |

                <span>
                    <img src="images/upbar/magazyn.png" alt="Warehouse" class="upbar-icon" />
                    <strong>@game.Player.GetCurrentInventorySize() / @game.Player.WarehouseCapacity</strong>
                </span> |

                <span>
                    <img src="images/upbar/energia.png" alt="Energy" class="upbar-icon" />
                    <strong>@game.Energy.CurrentEnergy / @game.Energy.MaxEnergy (+@game.Energy.GeneratedEnergyPerTick)</strong>
                </span> |

                <span>
                    <img src="images/upbar/level.png" alt="Level" class="upbar-icon" />
                    <strong>@game.Player.Level</strong>
                </span> |

                <span>
                    <img src="images/upbar/exp.png" alt="Experience" class="upbar-icon" />
                    <strong>@game.Player.Experience / @game.Player.GetExperienceForNextLevel(game.Player.Level + 1)</strong>
                </span>
            </div>
        </div>

        <article class="contentG">
            @Body
        </article>
    </main>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await market.InitializeAsync();
        await game.Load();

        game.OnUpdate += StateHasChanged;
    }

    public void Dispose()
    {
        game.OnUpdate -= StateHasChanged;
    }
}
