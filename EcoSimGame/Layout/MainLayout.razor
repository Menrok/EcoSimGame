@inherits LayoutComponentBase
@inject ILocalStorageService localStorage
@inject Services.ProductionService production
@using Blazored.LocalStorage
@using EcoSimGame.Models

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div class="user-info">
                <span><strong>@player.Name</strong></span> |
                <span>Pieniądze: <strong>@player.Money</strong></span> |
                <span>Pojemność magazynu: <strong>@player.GetCurrentInventorySize() / @player.WarehouseCapacity</strong></span> |
                <span>Energia: <strong>@production.Energy.CurrentEnergy / @production.Energy.MaxEnergy</strong></span>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private Player player = new Player();
    private System.Threading.Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        var storedPlayer = await localStorage.GetItemAsync<Player>("player");
        if (storedPlayer != null)
            player = storedPlayer;

        production.PlayerRef = player;
        production.LocalStorageRef = localStorage;
        production.OnUpdate += StateHasChanged;

        _timer = new System.Threading.Timer(async _ => await UpdatePlayerState(), null, 0, 1000);
    }

    private async Task UpdatePlayerState()
    {
        var storedPlayer = await localStorage.GetItemAsync<Player>("player");
        if (storedPlayer != null)
        {
            player.Money = storedPlayer.Money;
            player.WarehouseCapacity = storedPlayer.WarehouseCapacity;
            player.Inventory = storedPlayer.Inventory;
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
        production.OnUpdate -= StateHasChanged;
    }
}
