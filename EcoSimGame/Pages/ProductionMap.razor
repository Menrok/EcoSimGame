@page "/productionmap"
@using EcoSimGame.Components
@using EcoSimGame.Models
@using EcoSimGame.Models.Energy

@inject Services.GameStateService game

<div class="production-map">
    <div class="top-row">
        @for (int i = 0; i < game.PowerPlantSlots.Count; i++)
        {
            var index = i;
            var slot = game.PowerPlantSlots[index];

            <div class="slot power-plant" @onclick="@(() => OnPowerPlantSlotClicked(index))">
                @if (slot.IsOccupied && slot.Building is not null)
                {
                    var imageName = GetImageName(slot.Building.Name);

                    <div class="power-plant-slot-content">
                        <img src=@($"images/energy/{imageName}.png") alt="@slot.Building.Name" class="power-plant-icon" />
                        <div class="production-info">+@slot.Building.EnergyPerTick energii</div>
                    </div>
                }
                else
                {
                    <span>Zbuduj elektrownie</span>
                }
            </div>
        }
    </div>

    <div class="energy-storage-row">
        @for (int i = 0; i < game.EnergyStorageSlots.Count; i++)
        {
            var index = i;
            var slot = game.EnergyStorageSlots[index];

            <div class="slot energy-storage" @onclick="() => OnEnergyStorageSlotClicked(index)">
                @if (slot.IsBuilt)
                {
                    <div class="power-plant-slot-content">
                        <img src="images/energy/magazyn.png" alt="Magazyn energii" class="power-plant-icon" />
                        <div class="production-info">
                            Poj: @slot.Capacity<br />
                        </div>
                    </div>
                }
                else
                {
                    <span>Zbuduj magazyn energii</span>
                }
            </div>

        }
    </div>

    <div class="middle-row">
        <div class="slot warehouse" @onclick="() => OnWarehouseSlotClicked(0)">
            @if (game.WarehouseSlots.Count > 0 && game.WarehouseSlots[0].IsBuilt)
            {
                <div class="power-plant-slot-content">
                    <img src="images/warehouse/magazyn.png" alt="Magazyn" class="power-plant-icon" />
                    <div class="production-info">Poj: @game.WarehouseSlots[0].Capacity</div>
                </div>
            }
            else
            {
                <span>Zbuduj magazyn</span>
            }
        </div>
        <div class="factory-grid">
            @for (int i = 0; i < game.FactorySlots.Count / 2; i++)
            {
                var index = i;
                var slot = game.FactorySlots[index];

                <div class="slot factory" @onclick="@(() => OnFactorySlotClicked(index))">
                    @if (slot.IsBuilt && slot.GetFactory() is not null)
                    {
                        var imageName = GetImageName(slot.SelectedFactoryName ?? "fabryka");

                        <div class="power-plant-slot-content">
                            <img src=@($"images/factory/{imageName}.png") alt="@slot.SelectedFactoryName" class="power-plant-icon" />
                            <div class="production-info">
                                @(string.IsNullOrEmpty(slot.SelectedProduction)
                                    ? "Brak produkcji"
                                    : slot.SelectedProduction)
                            </div>
                        </div>
                    }
                    else
                    {
                        <span>Zbuduj fabrykę</span>
                    }
                </div>
            }
        </div>
        <div class="slot warehouse" @onclick="() => OnWarehouseSlotClicked(1)">
            @if (game.WarehouseSlots.Count > 1 && game.WarehouseSlots[1].IsBuilt)
            {
                <div class="power-plant-slot-content">
                    <img src="images/warehouse/magazyn.png" alt="Magazyn" class="power-plant-icon" />
                    <div class="production-info">Poj: @game.WarehouseSlots[1].Capacity</div>
                </div>
            }
            else
            {
                <span>Zbuduj magazyn</span>
            }
        </div>
    </div>

    <div class="middle-row">
        <div class="slot warehouse" @onclick="() => OnWarehouseSlotClicked(2)">
            @if (game.WarehouseSlots.Count > 2 && game.WarehouseSlots[2].IsBuilt)
            {
                <div class="power-plant-slot-content">
                    <img src="images/warehouse/magazyn.png" alt="Magazyn" class="power-plant-icon" />
                    <div class="production-info">Poj: @game.WarehouseSlots[2].Capacity</div>
                </div>
            }
            else
            {
                <span>Zbuduj magazyn</span>
            }
        </div>
        <div class="factory-grid">
            @for (int i = game.FactorySlots.Count / 2; i < game.FactorySlots.Count; i++)
            {
                var index = i;
                var slot = game.FactorySlots[index];

                <div class="slot factory" @onclick="() => OnFactorySlotClicked(index)">
                    @if (slot.IsBuilt && slot.GetFactory() is not null)
                    {
                        var imageName = GetImageName(slot.SelectedFactoryName ?? "fabryka");

                        <div class="power-plant-slot-content">
                            <img src=@($"images/factory/{imageName}.png") alt="@slot.SelectedFactoryName" class="power-plant-icon" />
                            <div class="production-info">
                                @(string.IsNullOrEmpty(slot.SelectedProduction) ? "Brak produkcji" : slot.SelectedProduction)
                            </div>
                        </div>
                    }
                    else
                    {
                        <span>Zbuduj fabrykę</span>
                    }
                </div>
            }
        </div>
        <div class="slot warehouse" @onclick="() => OnWarehouseSlotClicked(3)">
            @if (game.WarehouseSlots.Count > 3 && game.WarehouseSlots[3].IsBuilt)
            {
                <div class="power-plant-slot-content">
                    <img src="images/warehouse/magazyn.png" alt="Magazyn" class="power-plant-icon" />
                    <div class="production-info">Poj: @game.WarehouseSlots[3].Capacity</div>
                </div>
            }
            else
            {
                <span>Zbuduj magazyn</span>
            }
        </div>
    </div>
</div>

<EnergyPurchaseModal IsOpen="@isChoosing"
                     EnergyBuildings="@EnergyProductionList.AllBuildings"
                     OnSelectBuilding="ConfirmBuild"
                     Close="CloseModal" />
<EnergyStorageModal IsOpen="@isEnergyStorageModalOpen"
                    Slot="@game.EnergyStorageSlots[selectedEnergyStorageIndex]"
                    Close="CloseModal"
                    OnUpgrade="UpgradeEnergyStorage" />
<WarehouseModal IsOpen="@isWarehouseModalOpen"
                Slot="@game.WarehouseSlots[selectedWarehouseIndex]"
                Close="CloseModal"
                OnUpgrade="UpgradeWarehouse" />
<FactoryModal IsOpen="@isFactoryModalOpen"
              Slot="@game.FactorySlots[selectedFactoryIndex]"
              Close="CloseModal"
              OnUpgrade="UpgradeFactory"
              CloseAfterBuild="@ShouldCloseAfterBuild()" />

@code {
    private bool isChoosing = false;
    private int selectedSlotIndex;

    private bool isEnergyStorageModalOpen = false;
    private int selectedEnergyStorageIndex;

    private bool isWarehouseModalOpen = false;
    private int selectedWarehouseIndex;

    private bool isFactoryModalOpen = false;
    private int selectedFactoryIndex;

    private string? errorMessage;

    protected override void OnInitialized()
    {
        game.InitializePowerSlots();
        game.InitializeEnergyStorageSlots();
        game.InitializeWarehouseSlots();
        game.InitializeFactorySlots();
        game.OnUpdate += StateHasChanged;
    }

    private void OnPowerPlantSlotClicked(int index)
    {
        selectedSlotIndex = index;
        isChoosing = true;
        StateHasChanged();
    }

    private void OnEnergyStorageSlotClicked(int index)
    {
        selectedEnergyStorageIndex = index;
        isEnergyStorageModalOpen = true;
    }

    private void OnWarehouseSlotClicked(int index)
    {
        selectedWarehouseIndex = index;
        isWarehouseModalOpen = true;
    }

    private void OnFactorySlotClicked(int index)
    {
        selectedFactoryIndex = index;
        isFactoryModalOpen = true;
    }

    private Task CloseEnergyStorageModal()
    {
        isEnergyStorageModalOpen = false;
        return Task.CompletedTask;
    }

    private async Task UpgradeEnergyStorage()
    {
        isEnergyStorageModalOpen = false;
        await game.Save();
        StateHasChanged();
    }

    private async Task UpgradeWarehouse()
    {
        isWarehouseModalOpen = false;
        await game.Save();
        StateHasChanged();
    }

    private async Task UpgradeFactory()
    {
        isFactoryModalOpen = false;
        await game.Save();
        StateHasChanged();
    }

    private async Task RefreshPage()
    {
        isEnergyStorageModalOpen = false;
        await game.Save();
    }

    private async Task ConfirmBuild(EnergyProduction building)
    {
        var i = selectedSlotIndex;

        if (i < 0 || i >= game.PowerPlantSlots.Count)
        {
            errorMessage = "Nieprawidłowy slot!";
            return;
        }

        if (game.Player.Money >= building.Cost)
        {
            game.Player.Money -= building.Cost;

            game.SetPowerPlant(i, building);

            await game.Save();
            isChoosing = false;
        }
        else
        {
            errorMessage = "Za mało pieniędzy!";
        }
    }

    private string GetImageName(string name)
    {
        return name.ToLower()
            .Replace(" ", "")
            .Replace("ż", "z").Replace("ó", "o").Replace("ł", "l")
            .Replace("ć", "c").Replace("ś", "s").Replace("ą", "a")
            .Replace("ę", "e").Replace("ź", "z").Replace("ń", "n");
    }

    private void CloseModal()
    {
        isChoosing = false;
        isEnergyStorageModalOpen = false;
        isWarehouseModalOpen = false;
        isFactoryModalOpen = false;
    }

    private bool ShouldCloseAfterBuild()
    {
        var slot = game.FactorySlots[selectedFactoryIndex];
        return !slot.IsBuilt;
    }

    public void Dispose() => game.OnUpdate -= StateHasChanged;
}