@page "/CraftBuild"
@using Blazored.LocalStorage
@using EcoSimGame.Models
@inject ILocalStorageService localStorage

<h3>Produkcja</h3>

<div>
    <p><strong>Ruda Żelaza:</strong> @player.Inventory.GetQuantity("Ruda żelaza")</p>
    <p><strong>Sztabki Żelaza:</strong> @player.Inventory.GetQuantity("Sztabka żelaza")</p>

    @if (CanProcess())
    {
        <button @onclick="StartProcessing">Rozpocznij przetwarzanie</button>
    }
    else if (player.LastProcessingTime.HasValue)
    {
        <p>Przetwarzanie trwa: @processingTimeLeft</p>
    }
    else
    {
        <p>Brak wystarczającej ilości rudy żelaza do przetwarzania.</p>
    }
</div>

@code {
    private Player player = new Player();
    private string processingTimeLeft = string.Empty;
    private Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        var storedPlayer = await localStorage.GetItemAsync<Player>("player");
        if (storedPlayer != null)
        {
            player = storedPlayer;
        }

        UpdateProcessingStatus();

        _timer = new Timer(UpdateProcessingStatus, null, 0, 1000);
    }

    private bool CanProcess()
    {
        return player.Inventory.GetQuantity("Ruda żelaza") >= 2 &&
               (player.LastProcessingTime == null || DateTime.Now >= player.LastProcessingTime.Value.AddMinutes(1));
    }

    private async Task StartProcessing()
    {
        if (player.Inventory.Remove("Ruda żelaza", 2))
        {
            player.LastProcessingTime = DateTime.Now;
            await localStorage.SetItemAsync("player", player);

            UpdateProcessingStatus();
        }
    }

    private void UpdateProcessingStatus(object state = null)
    {
        if (player.LastProcessingTime.HasValue)
        {
            var timeLeft = player.LastProcessingTime.Value.AddMinutes(1) - DateTime.Now;

            if (timeLeft.TotalSeconds <= 0)
            {
                player.Inventory.Add("Sztabka żelaza", 1);
                player.LastProcessingTime = null;
                localStorage.SetItemAsync("player", player);
                processingTimeLeft = string.Empty;
            }
            else
            {
                processingTimeLeft = $"{timeLeft.Minutes} min {timeLeft.Seconds} s";
            }
        }
        else
        {
            processingTimeLeft = string.Empty;
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
