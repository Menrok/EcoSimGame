@page "/CraftBuild"
@inject Services.ProductionService production
@inject ILocalStorageService localStorage
@using Blazored.LocalStorage
@using EcoSimGame.Models

<h3>Produkcja</h3>

<div class="crafting-container">
    <div class="crafting-left">
        <p><strong>Energia:</strong> @production.Energy.CurrentEnergy / @production.Energy.MaxEnergy</p>
        <progress class="energy-bar" value="@production.Energy.CurrentEnergy" max="@production.Energy.MaxEnergy"></progress>

        <button class="upgrade-btn" @onclick="UpgradeEnergy">
            Ulepsz Magazyn Energii (Koszt: @production.Energy.UpgradeCost)
        </button>

        <h4>Dostępne receptury</h4>
        <button @onclick='@(() => TryStartProduction("Deski", 10, 5, new Dictionary<string, int>{{"Drewno", 2}}, "Deski"))'>
            2x Drewno → Deski
        </button>
        <button @onclick='@(() => TryStartProduction("Sztabka żelaza", 15, 8, new Dictionary<string, int>{{"Ruda żelaza", 2}}, "Sztabka żelaza"))'>
            2x Ruda → Sztabka
        </button>
        <button @onclick='@(() => TryStartProduction("Cegła", 12, 6, new Dictionary<string, int>{{"Glina", 2}}, "Cegła"))'>
            2x Glina → Cegła
        </button>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error">@errorMessage</p>
        }
    </div>

    <div class="crafting-right">
        <h4>Kolejka produkcyjna</h4>

        @if (production.Queue.Any())
        {
            @for (int i = 0; i < production.Queue.Count; i++)
            {
                var task = production.Queue[i];
                var isCurrent = i == 0;
                var percent = isCurrent ? CalculateProgress(task) : 0;
                var secondsLeft = isCurrent ? Math.Max(0, task.DurationSeconds - (int)(DateTime.Now - task.StartTime).TotalSeconds) : 0;
                var statusText = isCurrent ? $"W trakcie, {secondsLeft}s" : "Oczekuje";

                <div class="queue-item">
                    <p><strong>@task.ProductName</strong> (@statusText)</p>
                    <progress class="production-bar" value="@((int)percent)" max="100"></progress>
                </div>
            }
        }
        else
        {
            <p>Brak aktywnej produkcji.</p>
        }
    </div>
</div>

@code {
    private Player player = new();
    private string? errorMessage;
    private System.Threading.Timer? _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        var storedPlayer = await localStorage.GetItemAsync<Player>("player");
        if (storedPlayer != null)
        {
            player = storedPlayer;
            production.PlayerRef = player;
            production.LocalStorageRef = localStorage;
        }

        production.OnUpdate += StateHasChanged;
        _refreshTimer = new System.Threading.Timer(_ => InvokeAsync(StateHasChanged), null, 0, 200);
    }

    private double CalculateProgress(ProductionTask task)
    {
        if (task.StartTime == default || task.DurationSeconds <= 0)
            return 0;

        var elapsed = (DateTime.Now - task.StartTime).TotalSeconds;
        var percent = (elapsed / task.DurationSeconds) * 100.0;
        return Math.Min(100, percent);
    }

    private void UpgradeEnergy()
    {
        production.UpgradeEnergyStorage();
    }

    private void TryStartProduction(string name, int duration, int energy, Dictionary<string, int> ingredients, string output)
    {
        errorMessage = null;

        var task = new ProductionTask
            {
                ProductName = name,
                DurationSeconds = duration,
                TimeRemaining = duration,
                EnergyCost = energy,
                Ingredients = ingredients,
                OutputMaterial = output
            };

        if (!production.AddToQueue(task))
        {
            errorMessage = "Brak energii lub surowców!";
        }
    }

    public void Dispose()
    {
        production.OnUpdate -= StateHasChanged;
        _refreshTimer?.Dispose();
    }
}