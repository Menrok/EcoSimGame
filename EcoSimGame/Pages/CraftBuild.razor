@page "/CraftBuild"
@inject Services.GameStateService game
@using EcoSimGame.Models

<h3>Produkcja</h3>

<div class="crafting-container">
    <div class="crafting-left">
        <h4>Dostępne receptury</h4>
        <button @onclick='@(() => TryStartProduction("Deski", 10, 5, new Dictionary<string, int>{{"Drewno", 2}}, "Deski"))'>
            2x Drewno → Deski
        </button>
        <button @onclick='@(() => TryStartProduction("Sztabka żelaza", 15, 8, new Dictionary<string, int>{{"Ruda żelaza", 2}}, "Sztabka żelaza"))'>
            2x Ruda → Sztabka
        </button>
        <button @onclick='@(() => TryStartProduction("Cegła", 12, 6, new Dictionary<string, int>{{"Glina", 2}}, "Cegła"))'>
            2x Glina → Cegła
        </button>
        <button @onclick='@(() => TryStartProduction("Płótno", 10, 4, new Dictionary<string, int>{{"Len", 2}}, "Płótno"))'>
            2x Len → Płótno
        </button>

        @if (game.Player.HasSchematic("Narzędzia") || game.Player.HasSchematic("Odzież"))
        {
            <h4>Zaawansowane receptury</h4>

            @if (game.Player.HasSchematic("Narzędzia"))
            {
                <button @onclick='@(() => TryStartProduction("Narzędzia", 20, 10, new Dictionary<string, int>{{"Deski", 1}, {"Sztabka żelaza", 1}}, "Narzędzia"))'>
                    1x Deski + 1x Sztabka → Narzędzia
                </button>
            }
            @if (game.Player.HasSchematic("Odzież"))
            {
                <button @onclick='@(() => TryStartProduction("Odzież", 25, 12, new Dictionary<string, int>{{"Płótno", 2}}, "Odzież"))'>
                    2x Płótno → Odzież
                </button>
            }
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error">@errorMessage</p>
        }
    </div>

    <div class="crafting-right">
        <h4>Kolejka produkcyjna</h4>

        @if (game.ProductionQueue.Any())
        {
            @for (int i = 0; i < game.ProductionQueue.Count; i++)
            {
                var task = game.ProductionQueue[i];
                var isCurrent = i == 0;
                var percent = isCurrent ? CalculateProgress(task) : 0;
                var secondsLeft = isCurrent ? Math.Max(0, task.DurationSeconds - (int)(DateTime.Now - task.StartTime).TotalSeconds) : 0;
                var statusText = isCurrent ? $"W trakcie, {secondsLeft}s" : "Oczekuje";

                <div class="queue-item">
                    <p><strong>@task.ProductName</strong> (@statusText)</p>
                    <progress class="production-bar" value="@((int)percent)" max="100"></progress>
                </div>
            }
        }
        else
        {
            <p>Brak aktywnej produkcji.</p>
        }
    </div>
</div>

@code {
    private string? errorMessage;

    protected override void OnInitialized()
    {
        game.OnUpdate += StateHasChanged;
    }

    private double CalculateProgress(ProductionTask task)
    {
        if (task.StartTime == default || task.DurationSeconds <= 0)
            return 0;

        var elapsed = (DateTime.Now - task.StartTime).TotalSeconds;
        return Math.Min(100, (elapsed / task.DurationSeconds) * 100.0);
    }

    private void TryStartProduction(string name, int duration, int energy, Dictionary<string, int> ingredients, string output)
    {
        errorMessage = null;

        var task = new ProductionTask
            {
                ProductName = name,
                DurationSeconds = duration,
                TimeRemaining = duration,
                EnergyCost = energy,
                Ingredients = ingredients,
                OutputMaterial = output
            };

        if (!game.TryStartProduction(task))
        {
            errorMessage = "Brak energii lub surowców!";
        }
    }

    public void Dispose()
    {
        game.OnUpdate -= StateHasChanged;
    }
}
