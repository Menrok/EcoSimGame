@page "/DevelopmentCenter"
@using Blazored.LocalStorage
@using EcoSimGame.Models
@inject Services.GameStateService game
@implements IDisposable

<div class="tabs-wrapper">
    <div class="tabs">
        <button @onclick='() => SetActiveTab("tree")' class="@(activeTab == "tree" ? "active" : null)">Drzewko Produkcji</button>
        <button @onclick='() => SetActiveTab("infrastructure")' class="@(activeTab == "infrastructure" ? "active" : null)">Rozbudowa Infrastruktury</button>
        <button @onclick='() => SetActiveTab("research")' class="@(activeTab == "research" ? "active" : null)">Badania</button>
    </div>
</div>

<div class="tab-content">
    @if (activeTab == "tree")
    {
        <div class="infrastructure-container infrastructure-container-full">
            <div class="building-cards-row">
                @foreach (var node in productionTree.Nodes)
                {
                    var imageName = GetImageName(node.Name);

                    <div class="building-card">
                        <img src=@($"images/materials/{imageName}.png") alt="@node.Name" class="production-image" />

                        <div class="building-info">
                            <strong>@node.Name</strong><br />
                            Wymagany poziom: @node.RequiredLevel<br />
                            Cena: @node.CostMoney zł
                        </div>

                        @if (game.Player.HasSchematic(node.Name))
                        {
                            <span class="owned">(Schemat posiadasz)</span>
                        }
                        else if (game.Player.Level >= node.RequiredLevel)
                        {
                            <button @onclick="() => TryBuySchematic(node)">Kup schemat</button>
                        }
                        else
                        {
                            <span class="locked">(Osiągnij poziom @node.RequiredLevel)</span>
                        }
                    </div>
                }
            </div>
        </div>

    }
    else if (activeTab == "infrastructure")
    {
        <div class="infrastructure-grid">

            <div class="infrastructure-container">
                <h5>Magazyn Towarów</h5>
                <div class="building-cards-row">
                    <div class="building-card">
                        <img src="images/warehouse/magazyn.png" alt="Magazyn Towarów" class="building-image" />
                        <div class="building-info">
                            <strong>Magazyn Towarów</strong><br />
                            @game.Player.GetCurrentInventorySize() / @game.Player.WarehouseCapacity<br />
                            Koszt ulepszenia: @game.Player.WarehouseUpgradeCost
                        </div>
                        <button @onclick="UpgradeWarehouse">Ulepsz</button>
                    </div>
                </div>
            </div>

            <div class="infrastructure-container">
                <h5>Magazyn Energii</h5>
                <div class="building-cards-row">
                    <div class="building-card">
                        <img src="images/energy/magazyn.png" alt="Magazyn Energii" class="building-image" />
                        <div class="building-info">
                            <strong>Magazyn Energii</strong><br />
                            @game.Energy.CurrentEnergy / @game.Energy.MaxEnergy<br />
                            Koszt ulepszenia: @game.Energy.UpgradeCost
                        </div>
                        <button @onclick="UpgradeEnergy">Ulepsz</button>
                    </div>
                </div>
            </div>

            <div class="infrastructure-container infrastructure-container-full">
                <h5>Produkcja Energii</h5>
                <div class="building-cards-row">
                    @foreach (var building in EcoSimGame.Models.List.EnergyProductionList.AllBuildings)
                    {
                        var imageName = GetBuildingImage(building.Name);

                        <div class="building-card">
                            <img src="images/energy/@imageName" alt="@building.Name" class="building-image" />
                            <div class="building-info">
                                <strong>@building.Name</strong><br />
                                Produkcja: +@building.EnergyPerTick energii / 10s<br />
                                Koszt: @building.Cost
                            </div>
                            <button @onclick="() => TryBuyEnergyBuilding(building)">Kup</button>
                        </div>
                    }
                </div>
            </div>

        </div>
    }
    else if (activeTab == "research")
    {
        <h4>Badania</h4>
        <p>Ta sekcja będzie dostępna w przyszłości.</p>
    }
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="error"><strong>@errorMessage</strong></p>
}

@code {
    private ProductionTree productionTree = new();
    private string activeTab = "tree";
    private string? errorMessage;

    protected override void OnInitialized()
    {
        productionTree = new ProductionTree();
        game.OnUpdate += StateHasChanged;
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        errorMessage = null;
    }

    private async Task TryBuySchematic(ProductionNode node)
    {
        errorMessage = null;

        if (game.Player.TryBuySchematic(node.Name, node.RequiredLevel, node.CostMoney))
        {
            await game.Save();
        }
        else
        {
            errorMessage = "Nie spełniasz warunków zakupu schematu!";
        }
    }

    private async Task UpgradeWarehouse()
    {
        if (game.Player.UpgradeWarehouse())
        {
            await game.Save();
        }
        else
        {
            errorMessage = "Za mało środków na ulepszenie magazynu.";
        }
    }

    private async Task UpgradeEnergy()
    {
        if (game.Energy.TryUpgrade(game.Player.Money, out var newMoney))
        {
            game.Player.Money = newMoney;
            await game.Save();
        }
        else
        {
            errorMessage = "Za mało środków na ulepszenie energii.";
        }
    }

    private async Task TryBuyEnergyBuilding(EcoSimGame.Models.EnergyProduction building)
    {
        errorMessage = null;

        if (game.Player.Money >= building.Cost)
        {
            game.Player.Money -= building.Cost;
            game.Energy.GeneratedEnergyPerTick += building.EnergyPerTick;
            await game.Save();
        }
        else
        {
            errorMessage = "Za mało pieniędzy na budowę!";
        }
    }

    private string GetBuildingImage(string name)
    {
        return name.ToLower()
            .Replace(" ", "")
            .Replace("ł", "l")
            .Replace("ó", "o")
            .Replace("ę", "e")
            .Replace("ś", "s")
            .Replace("ą", "a")
            .Replace("ż", "z")
            .Replace("ź", "z")
            .Replace("ń", "n") + ".png";
    }

    private string GetImageName(string name)
    {
        return name.ToLower()
            .Replace(" ", "")
            .Replace("ż", "z").Replace("ó", "o").Replace("ł", "l")
            .Replace("ć", "c").Replace("ś", "s").Replace("ą", "a")
            .Replace("ę", "e").Replace("ź", "z").Replace("ń", "n");
    }

    public void Dispose()
    {
        game.OnUpdate -= StateHasChanged;
    }
}
