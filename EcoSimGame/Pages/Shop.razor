@page "/Shop"
@using Blazored.LocalStorage
@using EcoSimGame.Models
@using EcoSimGame.Models.List
@using EcoSimGame.Services
@inject Services.GameStateService game
@inject MarketService market

<h3>Sklep</h3>

<p><em>Ceny zmienią się za: @secondsLeft s</em></p>

@if (!string.IsNullOrEmpty(message))
{
    <p style="color: red;"><em>@message</em></p>
}

@if (buyableMaterials != null && sellableMaterialsProcessed != null && sellableMaterialsProducts != null)
{
    <div class="shop-container">
        <div class="shop-left">
            <h4>Zakupy</h4>
            @foreach (var material in buyableMaterials)
            {
                var price = market.GetPrice(material.Name);
                <p><strong>@material.Name</strong> – Cena: @price</p>
                <button @onclick="() => Buy(material.Name)" disabled="@(game.Player.Money < price)">Kup</button>
            }
        </div>

        <div class="shop-right">
            <h4>Sprzedaż</h4>

            <h5>Materiały przetworzone</h5>
            @foreach (var material in sellableMaterialsProcessed)
            {
                var quantity = game.Player.Inventory.GetQuantity(material.Name);
                var price = market.GetPrice(material.Name);
                <p><strong>@material.Name</strong> – Cena: @price (Masz: @quantity)</p>
                <button @onclick="() => Sell(material.Name)" disabled="@(quantity == 0)">Sprzedaj</button>
            }

            <h5>Produkty</h5>
            @foreach (var material in sellableMaterialsProducts)
            {
                var quantity = game.Player.Inventory.GetQuantity(material.Name);
                var price = market.GetPrice(material.Name);
                <p><strong>@material.Name</strong> – Cena: @price (Masz: @quantity)</p>
                <button @onclick="() => Sell(material.Name)" disabled="@(quantity == 0)">Sprzedaj</button>
            }
        </div>
    </div>
}
else
{
    <p>Ładowanie danych sklepu...</p>
}

@code {
    private List<Material> buyableMaterials = new();
    private List<Material> sellableMaterialsProcessed = new();
    private List<Material> sellableMaterialsProducts = new();
    private System.Timers.Timer refreshTimer;
    private int secondsLeft = 30;

    private string? message;

    protected override void OnInitialized()
    {
        game.OnUpdate += StateHasChanged;

        buyableMaterials = MaterialList.AllMaterials
            .Where(m => new[] { "Drewno", "Ruda żelaza", "Glina", "Len" }.Contains(m.Name))
            .ToList();

        sellableMaterialsProcessed = MaterialList.AllMaterials
            .Where(m => new[] { "Deski", "Sztabka żelaza", "Cegła", "Płótno" }.Contains(m.Name))
            .ToList();

        sellableMaterialsProducts = MaterialList.AllMaterials
            .Where(m => new[] { "Narzędzia", "Odzież" }.Contains(m.Name))
            .ToList();

        refreshTimer = new System.Timers.Timer(1000);
        refreshTimer.Elapsed += (_, _) => InvokeAsync(UpdateCountdown);
        refreshTimer.Start();
    }

    private void UpdateCountdown()
    {
        var elapsed = (DateTime.Now - market.LastPriceUpdate).TotalSeconds;
        secondsLeft = 30 - (int)(elapsed % 30);
        StateHasChanged();
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        game.OnUpdate -= StateHasChanged;
    }

    private async Task Buy(string materialName)
    {
        var price = market.GetPrice(materialName);

        if (game.Player.Money >= price)
        {
            if (game.Player.TryAddToInventory(materialName, 1))
            {
                game.Player.Money -= price;
                market.AffectPrice(materialName, 1);
                message = null;
                await game.Save();
            }
            else
            {
                message = "Brak miejsca w magazynie!";
            }
        }
    }

    private async Task Sell(string materialName)
    {
        var price = market.GetPrice(materialName);
        if (game.Player.Inventory.Remove(materialName, 1))
        {
            game.Player.Money += price;
            market.AffectPrice(materialName, -1);
            message = null;
            await game.Save();
        }
    }
}