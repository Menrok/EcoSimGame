@page "/Shop"
@using EcoSimGame.Models
@using EcoSimGame.Models.List
@using EcoSimGame.Services
@inject Services.GameStateService game
@inject MarketService market

<p><em>Ceny zmienią się za: @secondsLeft s</em></p>

@if (!string.IsNullOrEmpty(message))
{
    <p class="error"><em>@message</em></p>
}

@if (buyableMaterials.Any())
{
    <div class="shop-container">
        <div class="shop-left">
            <h4>Zakupy</h4>
            @foreach (var material in buyableMaterials)
            {
                var price = market.GetPrice(material.Name);
                var imageName = GetImageName(material.Name);

                <div class="material-entry" @onclick="() => Buy(material.Name)" title="@($"{material.Name} – Cena: {price}")">
                    <div class="material-container">
                        <img src=@($"images/materials/{imageName}.png") alt="@material.Name" class="material-icon" />
                        <div class="overlay">Kup</div>
                    </div>
                    <div class="material-info">
                        <p><strong>@material.Name</strong></p>
                        <p>Cena: @price</p>
                    </div>
                </div>
            }
        </div>

        <div class="shop-right">
            <h4>Sprzedaż</h4>

            <div class="tabs">
                <button @onclick='() => selectedTab = "materials"' class="@(selectedTab == "materials" ? "active" : null)">Materiały</button>
                <button @onclick='() => selectedTab = "processed"' class="@(selectedTab == "processed" ? "active" : null)">Surowce przetworzone</button>
                <button @onclick='() => selectedTab = "products"' class="@(selectedTab == "products" ? "active" : null)">Produkty</button>
            </div>

            <div class="tab-content">
                @foreach (var material in selectedTab switch
                {
                    "materials" => buyableMaterials,
                    "processed" => sellableMaterialsProcessed,
                    "products" => sellableMaterialsProducts,
                    _ => new List<Material>()
                })
                {
                    var qty = game.Player.Inventory.GetQuantity(material.Name);
                    var price = market.GetPrice(material.Name);
                    var imageName = GetImageName(material.Name);

                    <div class="material-entry" @onclick="() => Sell(material.Name)" title="@($"{material.Name} – Cena: {price}")">
                        <div class="material-container">
                            <img src=@($"images/materials/{imageName}.png") alt="@material.Name" class="material-icon" />
                            <div class="overlay">Sprzedaj</div>
                        </div>
                        <div class="material-info">
                            <p><strong>@material.Name</strong></p>
                            <p>Cena: @price</p>
                            <p>Masz: @qty</p>
                        </div>
                    </div>
                }
            </div>

        </div>
    </div>
}
else
{
    <p>Ładowanie danych sklepu...</p>
}

@code {
    private List<Material> buyableMaterials = new();
    private List<Material> sellableMaterialsProcessed = new();
    private List<Material> sellableMaterialsProducts = new();
    private System.Timers.Timer refreshTimer;
    private int secondsLeft = 30;

    private string selectedTab = "materials";
    private string? message;

    protected override void OnInitialized()
    {
        game.OnUpdate += StateHasChanged;

        buyableMaterials = MaterialList.AllMaterials
            .Where(m => new[] { "Drewno", "Ruda żelaza", "Glina", "Len" }.Contains(m.Name))
            .ToList();

        sellableMaterialsProcessed = MaterialList.AllMaterials
            .Where(m => new[] { "Deski", "Sztabka żelaza", "Cegła", "Płótno" }.Contains(m.Name))
            .ToList();

        sellableMaterialsProducts = MaterialList.AllMaterials
            .Where(m => new[] { "Narzędzia", "Odzież" }.Contains(m.Name))
            .ToList();

        refreshTimer = new System.Timers.Timer(1000);
        refreshTimer.Elapsed += (_, _) => InvokeAsync(UpdateCountdown);
        refreshTimer.Start();
    }

    private void UpdateCountdown()
    {
        var elapsed = (DateTime.Now - market.LastPriceUpdate).TotalSeconds;
        secondsLeft = 30 - (int)(elapsed % 30);
        StateHasChanged();
    }

    private string GetImageName(string name)
    {
        return name.ToLower()
            .Replace(" ", "")
            .Replace("ż", "z").Replace("ó", "o").Replace("ł", "l")
            .Replace("ć", "c").Replace("ś", "s").Replace("ą", "a")
            .Replace("ę", "e").Replace("ź", "z").Replace("ń", "n");
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        game.OnUpdate -= StateHasChanged;
    }

    private async Task Buy(string materialName)
    {
        var price = market.GetPrice(materialName);

        if (game.Player.Money >= price)
        {
            if (game.Player.TryAddToInventory(materialName, 1))
            {
                game.Player.Money -= price;
                await market.AffectPrice(materialName, 1);
                message = null;
                await game.Save();
            }
            else
            {
                message = "Brak miejsca w magazynie!";
            }
        }
    }

    private async Task Sell(string materialName)
    {
        var price = market.GetPrice(materialName);
        if (game.Player.Inventory.Remove(materialName, 1))
        {
            game.Player.Money += price;
            await market.AffectPrice(materialName, -1);
            message = null;
            await game.Save();
        }
    }
}
