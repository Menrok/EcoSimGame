@if (IsOpen)
{
    <div class="modal-backdrop" @onclick="CloseModal"></div>

    <div class="modal" @onclick:stopPropagation>
        <h3>Sklep</h3>

        <p><em>Ceny zmienią się za: @secondsLeft s</em></p>

        @if (!string.IsNullOrEmpty(message))
        {
            <p class="error"><em>@message</em></p>
        }

        <div class="shop-tabs">
            <button @onclick='() => currentMode = "buy"' class="@(currentMode == "buy" ? "active" : null)">Kupno</button>
            <button @onclick='() => currentMode = "sell"' class="@(currentMode == "sell" ? "active" : null)">Sprzedaż</button>
        </div>

        <div class="shop-container">
            @if (currentMode == "buy")
            {
                <div class="shop-left">
                    @foreach (var material in buyableMaterials)
                    {
                        var price = market.GetPrice(material.Name);
                        var imageName = NameHelper.NormalizeImageName(material.Name);

                        <div class="material-entry" @onclick="() => Buy(material.Name)" title="@(material.Name + " – Cena: " + price)">
                            <div class="material-container">
                                <img src="@($"images/materials/{imageName}.png")" alt="@material.Name" class="material-icon" />
                                <div class="overlay">Kup</div>
                            </div>
                            <div class="material-info">
                                <p><strong>@material.Name</strong></p>
                                <p>Cena: @price</p>
                            </div>
                        </div>
                    }
                </div>
            }
            else if (currentMode == "sell")
            {
                <div class="shop-right">
                    <div class="warehouse-columns">
                        @foreach (var group in sellInventoryGroups)
                        {
                            <div class="warehouse-column">
                                <div class="warehouse-grid">
                                    @foreach (var name in group.Value)
                                    {
                                        var qty = game.Player.Inventory.GetQuantity(name);
                                        if (qty > 0)
                                        {
                                            var price = market.GetPrice(name);
                                            var imageName = NameHelper.NormalizeImageName(name);

                                            <div class="material-entry" @onclick="() => Sell(name)" title="@(name + " – Cena: " + price)">
                                                <div class="material-container">
                                                    <img src="@($"images/materials/{imageName}.png")" alt="@name" class="material-icon" />
                                                    <div class="quantity-badge">@qty</div>
                                                    <div class="overlay">Sprzedaj</div>
                                                </div>
                                                <div class="material-info">
                                                    <p><strong>@name</strong></p>
                                                    <p>Cena: @price</p>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback Close { get; set; }

    private List<Material> buyableMaterials = new();
    private System.Timers.Timer? refreshTimer;
    private int secondsLeft = 30;
    private string? message;

    private string currentMode = "buy";

    private readonly Dictionary<string, List<string>> sellInventoryGroups = new()
    {
        ["Surowce"] = new() { "Ferronit", "Plastotyt", "Kwarcyn", "Voltanium" },
        ["Materiały przetworzone"] = new() { "Ferron", "Plastium", "Quarzite", "Voltite" },
        ["Półprodukty"] = new() { "Ferron Frame", "Plastoid Sheet", "Quarz Chip", "Volt Core" },
        ["Komponenty"] = new() { "NanoStructure", "Quantum CPU" },
        ["Projekty"] = new() { "Stacja Kolonizacyjna" }
    };

    protected override void OnInitialized()
    {
        game.OnUpdate += StateHasChanged;

        buyableMaterials = MaterialList.AllMaterials
            .Where(m => new[] { "Ferronit", "Plastotyt", "Kwarcyn", "Voltanium" }.Contains(m.Name))
            .ToList();

        refreshTimer = new System.Timers.Timer(1000);
        refreshTimer.Elapsed += (_, _) => InvokeAsync(UpdateCountdown);
        refreshTimer.Start();
    }

    private void UpdateCountdown()
    {
        var elapsed = (DateTime.Now - market.LastPriceUpdate).TotalSeconds;
        secondsLeft = 30 - (int)(elapsed % 30);
        StateHasChanged();
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        game.OnUpdate -= StateHasChanged;
    }

    private async Task Buy(string materialName)
    {
        var price = market.GetPrice(materialName);

        if (game.Player.Money >= price)
        {
            if (game.Player.TryAddToInventory(materialName, 1))
            {
                game.Player.Money -= price;
                await market.AffectPrice(materialName, 1);
                message = null;
                await game.Save();
            }
            else
            {
                message = "Brak miejsca w magazynie!";
            }
        }
    }

    private async Task Sell(string materialName)
    {
        var price = market.GetPrice(materialName);
        if (game.Player.Inventory.Remove(materialName, 1))
        {
            game.Player.Money += price;
            await market.AffectPrice(materialName, -1);
            message = null;
            await game.Save();
        }
    }

    private void CloseModal() => Close.InvokeAsync();
}