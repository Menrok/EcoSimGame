@using EcoSimGame.Models
@using EcoSimGame.Models.Factories
@using EcoSimGame.Models.Slot
@inject Services.GameStateService game

@if (IsOpen)
{
    <div class="modal-backdrop" @onclick="CloseModal"> </div>

    <div class="modal" @onclick:stopPropagation>
        <h3>@Slot.GetFactory()?.Name</h3>

        <div class="factory-panel">
            <div class="factory-left">
                <h4>Wybierz produkcję:</h4>
                <div class="material-icons">
                    @foreach (var material in availableProductions)
                    {
                        <img src="@($"images/materials/{GetImageName(material)}.png")"
                             alt="@material"
                             title="@material"
                             class="material-icon"
                             @onclick="() => SetProduction(material)" />
                    }
                </div>
                <p>Aktualna produkcja: <strong>@(string.IsNullOrEmpty(Slot.SelectedProduction) ? "Brak" : Slot.SelectedProduction)</strong></p>
            </div>

            <div class="factory-right">
                <h4>Parametry fabryki</h4>
                <ul>
                    <li>Poziom: @Slot.Level</li>
                    <li>Czas produkcji: @Math.Max(6.0 - Slot.Level, 1.0) s</li>
                    <li>Zużycie energii: 1 jednostka na cykl</li>
                </ul>

                <button @onclick="UpgradeFactory" disabled="@(!CanAfford(Slot.UpgradeCost))">
                    Ulepsz fabrykę (koszt: @Slot.UpgradeCost)
                </button>
                <button @onclick="DemolishFactory">
                    Zburz fabrykę
                </button>
            </div>
        </div>

        <div class="progress-bar-outer full-width">
            <div class="progress-bar-inner" style="width:@($"{ProductionProgress}%")"></div>
        </div>
        <p>@ProductionProgress%</p>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public FactorySlot Slot { get; set; } = new();
    [Parameter] public EventCallback Close { get; set; }
    [Parameter] public EventCallback OnFactoryUpdated { get; set; }

    private List<string> availableProductions = new();
    private int ProductionProgress => GetProductionProgressPercent();

    protected override void OnParametersSet()
    {
        if (Slot.GetFactory() is { } factory)
        {
            availableProductions = factory.Productions;
        }
    }

    private async Task SetProduction(string material)
    {
        Slot.SelectedProduction = material;
        await game.Save();
    }

    private async Task UpgradeFactory()
    {
        if (CanAfford(Slot.UpgradeCost))
        {
            game.Player.Money -= Slot.UpgradeCost;
            Slot.Upgrade();
            await game.Save();
        }
    }

    private async Task DemolishFactory()
    {
        Slot.IsBuilt = false;
        Slot.SelectedFactoryName = string.Empty;
        Slot.SelectedProduction = string.Empty;
        Slot.Level = 1;
        await game.Save();
        await OnFactoryUpdated.InvokeAsync();
    }

    private bool CanAfford(decimal cost) => game.Player.Money >= cost;
    private void CloseModal() => Close.InvokeAsync();

    private int GetProductionProgressPercent()
    {
        var elapsed = (DateTime.Now - Slot.GetLastProductionTime()).TotalSeconds;
        var interval = Math.Max(6.0 - Slot.Level, 1.0);
        return Math.Min((int)(elapsed / interval * 100), 100);
    }

    private string GetImageName(string name) => name.ToLower()
        .Replace(" ", "")
        .Replace("ż", "z").Replace("ó", "o").Replace("ł", "l")
        .Replace("ć", "c").Replace("ś", "s").Replace("ą", "a")
        .Replace("ę", "e").Replace("ź", "z").Replace("ń", "n");
}
