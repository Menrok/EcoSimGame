@if (IsOpen)
{
    <div class="modal-backdrop" @onclick="CloseModal"></div>

    <div class="modal">
        <h3>Zarządzaj magazynem</h3>

        <div class="building-cards-row">
            <div class="building-card">
                <img src="images/warehouse/magazyn.png" alt="Budowa Magazynu" class="building-image" />
                <div class="building-info">
                    <strong>Budowa magazynu</strong><br />
                    Pojemność: @Slot.Capacity<br />
                    Koszt: @Slot.UpgradeCost
                </div>
                <button @onclick="Build" disabled="@(Slot.IsBuilt || !CanAffordBuild())">Buduj</button>
            </div>

            <div class="building-card">
                <img src="images/warehouse/ulepszmagazyn.png" alt="Ulepsz Magazyn" class="building-image" />
                <div class="building-info">
                    <strong>Ulepsz magazyn</strong><br />
                    Poziom: @Slot.Level<br />
                    Nowa pojemność: @(Slot.Capacity + 100)<br />
                    Koszt: @Slot.UpgradeCost
                </div>
                <button @onclick="Upgrade" disabled="@(!Slot.IsBuilt || !CanAffordUpgrade())">Ulepsz</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public WarehouseSlot Slot { get; set; } = new();
    [Parameter] public EventCallback Close { get; set; }
    [Parameter] public EventCallback OnUpgrade { get; set; }

    private async Task Build()
    {
        if (game.Player.Money >= Slot.UpgradeCost)
        {
            game.Player.Money -= Slot.UpgradeCost;
            Slot.IsBuilt = true;
            game.Player.UpdateTotalWarehouseCapacity();
            await game.Save();
            await OnUpgrade.InvokeAsync();
        }
    }

    private async Task Upgrade()
    {
        if (game.Player.Money >= Slot.UpgradeCost)
        {
            game.Player.Money -= Slot.UpgradeCost;
            Slot.Upgrade();
            game.Player.UpdateTotalWarehouseCapacity();
            await game.Save();
            await OnUpgrade.InvokeAsync();
        }
    }

    private bool CanAffordUpgrade() => game.Player.Money >= Slot.UpgradeCost;
    private bool CanAffordBuild() => game.Player.Money >= Slot.UpgradeCost;

    private void CloseModal() => Close.InvokeAsync();
}